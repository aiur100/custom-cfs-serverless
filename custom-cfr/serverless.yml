service: weather-3
frameworkVersion: '2'

custom: 
  forceResourceRun: ${file(./config.js):fetchRandomKey}
  weatherApiArn: arn:aws:lambda:us-east-1:#{AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-weatherApi

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    API_NAME: "WeatherApi"

functions:
  deployProject:
    handler: lambdas/deployProject.handler
    environment:
      API_ARN: ${self:custom.weatherApiArn}
      API_GW_ROLE: 
        Fn::GetAtt: [ ApigAwsProxyRole, Arn ]
  weatherApi:
    handler: lambdas/weatherApi.handler

resources:
  Resources:
    #This CF Custom Resource Deploys the entire project
    DeployProjectResource:
      Type: Custom::DeployProjectResource
      Properties:
        ForceRun: ${self:custom.forceResourceRun}
        ServiceToken:
          Fn::GetAtt:
            - DeployProjectLambdaFunction 
            - Arn
    ApiInvokeFunctionPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - "*"
    ApigAwsProxyRole:
      Type: AWS::IAM::Role
      Description: "Used to give the API GW access to a Lambda Function"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - "sts:AssumeRole"
              Principal:
                Service: "apigateway.amazonaws.com"
        ManagedPolicyArns:
          - !Ref ApiInvokeFunctionPolicy
